name: Qualification

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * *' # Daily at 03:00 UTC

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  # Job 0: Detect Changes
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      tests: ${{ steps.filter.outputs.tests }}
      e2e: ${{ steps.filter.outputs.e2e }}
      docs: ${{ steps.filter.outputs.docs }}
      config: ${{ steps.filter.outputs.config }}
      workflows: ${{ steps.filter.outputs.workflows }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            # Mutually exclusive filters - each file belongs to exactly one category

            # 1. Workflows - GitHub Actions (highest priority)
            workflows:
              - '.github/workflows/**'

            # 2. Dependencies - package management
            dependencies:
              - 'package.json'
              - 'pnpm-lock.yaml'

            # 3. E2E tests - Playwright tests (before general tests)
            e2e:
              - 'src/test/e2e/**/*.e2e.{ts,tsx}'
              - 'playwright.config.ts'

            # 4. Unit/Integration tests - all test files
            tests:
              - 'src/test/**/*.test.{ts,tsx}'
              - 'src/test/**/*.spec.{ts,tsx}'
              - 'src/test/setup.ts'
              - 'src/test/*/setup.ts'

            # 5. Documentation - all docs and markdown
            docs:
              - 'docs/**'
              - '*.md'
              - '.github/instructions/**'

            # 6. Configuration - build/tooling config files
            config:
              - '*.config.{js,ts,cjs,mjs}'
              - 'tsconfig*.json'
              - '.nvmrc'
              - '.prettierrc*'
              - '.eslintrc*'
              - 'commitlint.config.js'
              - 'electron-builder.yml'
              - 'renovate.json'
              - '.editorconfig'
              - '.gitignore'
              - '.gitattributes'

            # 7. Production code - app source (excluding tests, docs, config)
            code:
              - 'src/**/*.{ts,tsx}'
              - 'src/**/*.{css,module.css}'
              - 'electron/**/*.ts'
              - 'index.html'
              - 'main.css'

  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: code changes, config changes, workflow changes, or scheduled runs
    if: |
      needs.detect-changes.outputs.code == 'true' ||
      needs.detect-changes.outputs.tests == 'true' ||
      needs.detect-changes.outputs.config == 'true' ||
      needs.detect-changes.outputs.workflows == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: Check commit messages
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          # Check if commits follow conventional commit format
          # Non-blocking: Local pre-commit hooks enforce this
          pnpm exec commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  # Job 2: Type Safety
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: code changes, config changes, or scheduled runs
    if: |
      needs.detect-changes.outputs.code == 'true' ||
      needs.detect-changes.outputs.tests == 'true' ||
      needs.detect-changes.outputs.e2e == 'true' ||
      needs.detect-changes.outputs.config == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm typecheck

  # Job 3: Unit & Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: code changes, test changes, or dependencies changes
    if: |
      needs.detect-changes.outputs.code == 'true' ||
      needs.detect-changes.outputs.tests == 'true' ||
      needs.detect-changes.outputs.dependencies == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./coverage/coverage-final.json

  # Job 4: E2E Tests (Playwright)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: code changes, E2E test changes, or dependencies changes (skip for docs-only)
    if: |
      needs.detect-changes.outputs.code == 'true' ||
      needs.detect-changes.outputs.e2e == 'true' ||
      needs.detect-changes.outputs.dependencies == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright Chromium browser
        run: pnpm exec playwright install chromium --with-deps

      - name: Run E2E tests
        run: pnpm test:e2e

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 1

  # Job 5: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: code changes, config changes, or dependencies changes
    if: |
      needs.detect-changes.outputs.code == 'true' ||
      needs.detect-changes.outputs.config == 'true' ||
      needs.detect-changes.outputs.dependencies == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Check build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi

  # Job 6: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    # Run on: dependency changes, or scheduled runs only
    if: |
      needs.detect-changes.outputs.dependencies == 'true' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

  # Job 7: Status Summary (Required Check)
  status-summary:
    name: Status Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, code-quality, type-check, test, e2e-tests, build, security]
    if: always()
    steps:
      - name: Check job statuses
        id: check
        run: |
          echo "## Job Execution Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Helper function to check job result
          check_job() {
            local job_name="$1"
            local job_result="$2"
            local was_skipped="$3"
            
            if [ "$was_skipped" = "true" ]; then
              echo "- ⏭️  **$job_name**: Skipped (no relevant changes)" >> $GITHUB_STEP_SUMMARY
              echo "$job_name=skipped" >> $GITHUB_OUTPUT
              return 0
            elif [ "$job_result" = "success" ]; then
              echo "- ✅ **$job_name**: Passed" >> $GITHUB_STEP_SUMMARY
              echo "$job_name=success" >> $GITHUB_OUTPUT
              return 0
            elif [ "$job_result" = "skipped" ]; then
              echo "- ⏭️  **$job_name**: Skipped" >> $GITHUB_STEP_SUMMARY
              echo "$job_name=skipped" >> $GITHUB_OUTPUT
              return 0
            else
              echo "- ❌ **$job_name**: Failed" >> $GITHUB_STEP_SUMMARY
              echo "$job_name=failed" >> $GITHUB_OUTPUT
              return 1
            fi
          }

          # Track if any required job failed
          all_passed=true

          # Check each job (skipped jobs are treated as success)
          check_job "Code Quality" "${{ needs.code-quality.result }}" "false" || all_passed=false
          check_job "Type Check" "${{ needs.type-check.result }}" "false" || all_passed=false
          check_job "Tests" "${{ needs.test.result }}" "false" || all_passed=false
          check_job "E2E Tests" "${{ needs.e2e-tests.result }}" "false" || all_passed=false
          check_job "Build" "${{ needs.build.result }}" "false" || all_passed=false
          check_job "Security" "${{ needs.security.result }}" "false" || all_passed=false

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Changed File Categories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Code: ${{ needs.detect-changes.outputs.code }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.detect-changes.outputs.tests }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E: ${{ needs.detect-changes.outputs.e2e }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docs: ${{ needs.detect-changes.outputs.docs }}" >> $GITHUB_STEP_SUMMARY
          echo "- Config: ${{ needs.detect-changes.outputs.config }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflows: ${{ needs.detect-changes.outputs.workflows }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ${{ needs.detect-changes.outputs.dependencies }}" >> $GITHUB_STEP_SUMMARY

          if [ "$all_passed" = "false" ]; then
            echo "all_passed=false" >> $GITHUB_OUTPUT
          else
            echo "all_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify required jobs passed
        run: |
          # Fail if any job explicitly failed (not skipped)
          if [[ "${{ needs.code-quality.result }}" == "failure" ]] ||
             [[ "${{ needs.type-check.result }}" == "failure" ]] ||
             [[ "${{ needs.test.result }}" == "failure" ]] ||
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]] ||
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "::error::One or more required qualification checks failed"
            exit 1
          fi

          echo "✅ All required status checks passed or skipped!"
