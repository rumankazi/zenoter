name: Update PR Metadata

on:
  pull_request:
    types: [opened, synchronize, edited]

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  validate-title:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            chore
            ci
            build
            revert
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            Subject must start with a lowercase letter.

            Examples:
            ‚úÖ feat: add new feature
            ‚úÖ fix(editor): resolve crash on startup
            ‚ùå feat: Add new feature (uppercase A)

            See https://www.conventionalcommits.org/ for more info.

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
      tests: ${{ steps.filter.outputs.tests }}
      e2e: ${{ steps.filter.outputs.e2e }}
      docs: ${{ steps.filter.outputs.docs }}
      config: ${{ steps.filter.outputs.config }}
      workflows: ${{ steps.filter.outputs.workflows }}
      dependencies: ${{ steps.filter.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check changed files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            # Mutually exclusive filters - each file belongs to exactly one category

            # 1. Workflows - GitHub Actions (highest priority)
            workflows:
              - '.github/workflows/**'

            # 2. Dependencies - package management
            dependencies:
              - 'package.json'
              - 'pnpm-lock.yaml'

            # 3. E2E tests - Playwright tests (before general tests)
            e2e:
              - 'src/test/e2e/**/*.e2e.{ts,tsx}'
              - 'playwright.config.ts'

            # 4. Unit/Integration tests - all test files
            tests:
              - 'src/test/**/*.test.{ts,tsx}'
              - 'src/test/**/*.spec.{ts,tsx}'
              - 'src/test/setup.ts'
              - 'src/test/*/setup.ts'

            # 5. Documentation - all docs and markdown
            docs:
              - 'docs/**'
              - '*.md'
              - '.github/instructions/**'

            # 6. Configuration - build/tooling config files
            config:
              - '*.config.{js,ts,cjs,mjs}'
              - 'tsconfig*.json'
              - '.nvmrc'
              - '.prettierrc*'
              - '.eslintrc*'
              - 'commitlint.config.js'
              - 'electron-builder.yml'
              - 'renovate.json'
              - '.editorconfig'
              - '.gitignore'
              - '.gitattributes'

            # 7. Production code - app source (excluding tests, docs, config)
            code:
              - 'src/**/*.{ts,tsx}'
              - 'src/**/*.{css,module.css}'
              - 'electron/**/*.ts'
              - 'index.html'
              - 'main.css'

  update-pr:
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commits
        id: commits
        run: |
          commits=$(git log origin/main..HEAD --pretty=format:"- %s (%h)" | head -20)
          if [ -z "$commits" ]; then
            commits="- No commits found"
          fi
          {
            echo "list<<EOF"
            echo "$commits"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Detect change type
        id: type
        run: |
          commit_messages=$(git log origin/main..HEAD --pretty=format:"%s%n%b")

          if echo "$commit_messages" | grep -qE "BREAKING CHANGE|^[a-z]+(\([a-z]+\))?!:"; then
            {
              echo "type=major"
              echo "icon=üö®"
              echo "badge=Major Release"
            } >> "$GITHUB_OUTPUT"
          elif echo "$commit_messages" | grep -qE "^feat(\([a-z]+\))?:"; then
            {
              echo "type=minor"
              echo "icon=‚ú®"
              echo "badge=Minor Release"
            } >> "$GITHUB_OUTPUT"
          elif echo "$commit_messages" | grep -qE "^fix(\([a-z]+\))?:"; then
            {
              echo "type=patch"
              echo "icon=üêõ"
              echo "badge=Patch Release"
            } >> "$GITHUB_OUTPUT"
          else
            {
              echo "type=none"
              echo "icon=üìù"
              echo "badge=No Release"
            } >> "$GITHUB_OUTPUT"
          fi

      - name: Count changes by type
        id: stats
        run: |
          commit_messages=$(git log origin/main..HEAD --pretty=format:"%s")

          # Use grep with || true to avoid non-zero exit codes, then default to 0
          feat_count=$(echo "$commit_messages" | grep -cE "^feat(\([a-z]+\))?:" || true)
          fix_count=$(echo "$commit_messages" | grep -cE "^fix(\([a-z]+\))?:" || true)
          docs_count=$(echo "$commit_messages" | grep -cE "^docs(\([a-z]+\))?:" || true)
          test_count=$(echo "$commit_messages" | grep -cE "^test(\([a-z]+\))?:" || true)
          refactor_count=$(echo "$commit_messages" | grep -cE "^refactor(\([a-z]+\))?:" || true)
          style_count=$(echo "$commit_messages" | grep -cE "^style(\([a-z]+\))?:" || true)
          perf_count=$(echo "$commit_messages" | grep -cE "^perf(\([a-z]+\))?:" || true)
          chore_count=$(echo "$commit_messages" | grep -cE "^chore(\([a-z]+\))?:" || true)

          # Default to 0 if empty
          feat_count=${feat_count:-0}
          fix_count=${fix_count:-0}
          docs_count=${docs_count:-0}
          test_count=${test_count:-0}
          refactor_count=${refactor_count:-0}
          style_count=${style_count:-0}
          perf_count=${perf_count:-0}
          chore_count=${chore_count:-0}

          {
            echo "feat=$feat_count"
            echo "fix=$fix_count"
            echo "docs=$docs_count"
            echo "test=$test_count"
            echo "refactor=$refactor_count"
            echo "style=$style_count"
            echo "perf=$perf_count"
            echo "chore=$chore_count"
          } >> "$GITHUB_OUTPUT"

      - name: Check for Zenoter-specific concerns
        id: checks
        run: |
          # Check if any files contain inline styles or CSS-in-JS violations
          csp_warning=""
          if git diff origin/main..HEAD -- '*.tsx' '*.ts' | grep -qE 'style=\{|css`|styled\.|@emotion'; then
            csp_warning="‚ö†Ô∏è **CSP Warning**: Possible inline styles or CSS-in-JS detected. Use CSS Modules instead."
          fi

          # Check if test files were modified
          tests_modified="‚è≠Ô∏è"
          if git diff origin/main..HEAD --name-only | grep -qE '\.test\.|\.spec\.|\.e2e\.'; then
            tests_modified="‚úÖ"
          fi

          # Check if coverage report exists (rough indicator)
          coverage_note="Run tests to verify coverage ‚â• 90%"

          {
            echo "csp_warning=$csp_warning"
            echo "tests_modified=$tests_modified"
            echo "coverage_note=$coverage_note"
          } >> "$GITHUB_OUTPUT"

      - name: Update PR description
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const icon = '${{ steps.type.outputs.icon }}';
            const badge = '${{ steps.type.outputs.badge }}';
            const commitList = `${{ steps.commits.outputs.list }}`;
            const cspWarning = '${{ steps.checks.outputs.csp_warning }}';

            // Get change detection results
            const changes = {
              code: '${{ needs.detect-changes.outputs.code }}' === 'true',
              tests: '${{ needs.detect-changes.outputs.tests }}' === 'true',
              e2e: '${{ needs.detect-changes.outputs.e2e }}' === 'true',
              docs: '${{ needs.detect-changes.outputs.docs }}' === 'true',
              config: '${{ needs.detect-changes.outputs.config }}' === 'true',
              workflows: '${{ needs.detect-changes.outputs.workflows }}' === 'true',
              dependencies: '${{ needs.detect-changes.outputs.dependencies }}' === 'true'
            };

            // Build dynamic CI/CD status
            const codeOrTests = changes.code || changes.tests;
            const ciStatus = `
            ### üöÄ CI/CD Status (Based on Changed Files)

            The following checks will run based on your changes:

            **Code Quality & Tests:**
            - ${codeOrTests ? '‚úÖ' : '‚è≠Ô∏è'} **Code Quality**: ${codeOrTests ? 'Will run (code/test changes detected)' : 'Skipped (no code/test changes)'}
            - ${codeOrTests ? '‚úÖ' : '‚è≠Ô∏è'} **Unit Tests**: ${codeOrTests ? 'Will run (Vitest)' : 'Skipped (no code/test changes)'}
            - ${changes.e2e ? '‚úÖ' : '‚è≠Ô∏è'} **E2E Tests**: ${changes.e2e ? 'Will run (Playwright)' : 'Skipped (no E2E test changes)'}

            **Build & Deploy:**
            - ‚úÖ **Build**: Will run (Electron app compilation + .exe generation)
            - ${changes.docs ? '‚úÖ' : '‚è≠Ô∏è'} **Docs Deploy**: ${changes.docs ? 'Will run (VitePress)' : 'Skipped (no doc changes)'}

            **Infrastructure:**
            - ${changes.workflows ? '‚úÖ' : '‚è≠Ô∏è'} **Workflow Tests**: ${changes.workflows ? 'Will run (workflow changes detected)' : 'Skipped (no workflow changes)'}
            - ${changes.dependencies ? '‚úÖ' : '‚è≠Ô∏è'} **Dependency Check**: ${changes.dependencies ? 'Will run (dependency changes detected)' : 'Skipped (no dependency changes)'}

            **Release:**
            - üöÄ **Semantic Release**: Will run if merged to main (based on commit type)`;

            // Build statistics section
            let statsSection = '';
            const stats = {
              '‚ú® Features': ${{ steps.stats.outputs.feat }},
              'üêõ Fixes': ${{ steps.stats.outputs.fix }},
              '‚ôªÔ∏è Refactors': ${{ steps.stats.outputs.refactor }},
              '‚úÖ Tests': ${{ steps.stats.outputs.test }},
              '‚ö° Performance': ${{ steps.stats.outputs.perf }},
              'üìù Documentation': ${{ steps.stats.outputs.docs }},
              'üé® Styles': ${{ steps.stats.outputs.style }},
              'üîß Chores': ${{ steps.stats.outputs.chore }}
            };

            const nonZeroStats = Object.entries(stats)
              .filter(([_, count]) => count > 0)
              .map(([type, count]) => `- ${type}: ${count}`)
              .join('\n');

            if (nonZeroStats) {
              statsSection = `\n### üìä Change Statistics\n${nonZeroStats}\n`;
            }

            // Build dynamic quality checklist
            let qualityChecklist = '### ‚úÖ Zenoter Quality Checklist\n\n';

            // Code/test-related checks
            if (codeOrTests) {
              qualityChecklist += `- ${{ steps.checks.outputs.tests_modified }} Tests modified/added\n`;
              qualityChecklist += `- [ ] Unit test coverage ‚â• 90% (run \`pnpm test:coverage\`)\n`;
            }

            // E2E checks (if E2E tests or code changed)
            if (changes.e2e || changes.code) {
              qualityChecklist += `- [ ] E2E tests pass (run \`pnpm test:e2e\`)\n`;
            }

            // Build always runs
            qualityChecklist += `- [ ] Windows .exe builds successfully\n`;

            // Code quality checks (only for actual code changes)
            if (changes.code) {
              qualityChecklist += `- [ ] No CSP violations (CSS Modules only, no inline styles)\n`;
              qualityChecklist += `- [ ] Accessibility verified (ARIA attributes where needed)\n`;
              qualityChecklist += `- [ ] Animations use Framer Motion (60fps minimum)\n`;
            }

            // Docs-specific checks
            if (changes.docs) {
              qualityChecklist += `- [ ] Documentation is clear and up-to-date\n`;
              qualityChecklist += `- [ ] No broken links in documentation\n`;
            }

            // Config/workflow checks
            if (changes.workflows) {
              qualityChecklist += `- [ ] Workflow changes tested locally or in forked repo\n`;
            }

            if (changes.dependencies) {
              qualityChecklist += `- [ ] Dependencies reviewed for security vulnerabilities\n`;
              qualityChecklist += `- [ ] Lock file updated correctly\n`;
            }

            const body = `## ${icon} ${badge}

            > **Semantic Release Impact**: This PR will trigger a **\`${{ steps.type.outputs.type }}\`** version bump.
            ${statsSection}
            ### üìù Commits

            ${commitList}

            ---

            ${qualityChecklist}

            ${cspWarning ? `\n${cspWarning}\n` : ''}
            ${ciStatus}

            ---

            <details>
            <summary>üìö Development Guidelines</summary>

            - **Phase 1 (MVP)**: Local-only features, no cloud infrastructure
            - **CSS**: Always use CSS Modules (\`.module.css\`), never inline styles
            - **Testing**: Write tests first (TDD approach)
            - **Accessibility**: Include ARIA attributes for interactive elements
            - **Performance**: Startup < 3s, animations at 60fps

            See [Development Instructions](.github/instructions/zenote.instructions.md) for full guidelines.
            </details>
            `;

            await github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: body
            });

            core.info('‚úÖ PR description updated successfully');
