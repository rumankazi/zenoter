name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - release-candidate
          - custom
      custom_version:
        description: 'Custom version (only for custom type, e.g., 2.0.0)'
        required: false
        type: string
      source_branch:
        description: 'Branch to release from'
        required: true
        type: string
        default: 'main'
      prerelease:
        description: 'Mark as pre-release?'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.check.outputs.is_valid }}
      version: ${{ steps.compute.outputs.version }}
      is_prerelease: ${{ steps.compute.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.source_branch }}
          fetch-depth: 0

      - name: Validate inputs
        id: check
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CUSTOM_VERSION="${{ github.event.inputs.custom_version }}"

          if [[ "$RELEASE_TYPE" == "custom" && -z "$CUSTOM_VERSION" ]]; then
            echo "❌ Custom version required when release type is 'custom'"
            exit 1
          fi

          if [[ -n "$CUSTOM_VERSION" && ! $CUSTOM_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc\.[0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $CUSTOM_VERSION"
            echo "Version must be in format: X.Y.Z or X.Y.Z-rc.N"
            exit 1
          fi

          echo "✅ Inputs validated"
          echo "is_valid=true" >> $GITHUB_OUTPUT

      - name: Compute version
        id: compute
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          CURRENT=$(grep -Po '"version": *"\K[^"]*' package.json | sed 's/-rc\.[0-9]*//')

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case "$RELEASE_TYPE" in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            release-candidate)
              # Get last RC number for current version
              LAST_RC=$(git tag -l "v$MAJOR.$((MINOR + 1)).0-rc.*" | sort -V | tail -1 | grep -oP 'rc\.\K[0-9]+' || echo "0")
              NEW_VERSION="$MAJOR.$((MINOR + 1)).0-rc.$((LAST_RC + 1))"
              ;;
            custom)
              NEW_VERSION="${{ github.event.inputs.custom_version }}"
              ;;
          esac

          echo "Current version: $CURRENT"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Determine if prerelease
          if [[ "$NEW_VERSION" =~ -rc\. ]] || [[ "${{ github.event.inputs.prerelease }}" == "true" ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

  create-release:
    name: Create Release
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ needs.validate.outputs.version }}
      is_prerelease: ${{ needs.validate.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.inputs.source_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Update version in package.json
        run: |
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
          pnpm install --lockfile-only

      - name: Generate CHANGELOG
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"

          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s" --max-count=100 ${{ github.event.inputs.source_branch }})
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s" --max-count=100 $LAST_TAG..${{ github.event.inputs.source_branch }})
          fi

          # Determine section title
          if [[ "$RELEASE_TYPE" == "major" ]]; then
            SECTION_TITLE="### 💥 Breaking Changes"
          elif [[ "$RELEASE_TYPE" == "release-candidate" ]]; then
            SECTION_TITLE="### 🧪 Release Candidate"
          else
            SECTION_TITLE="### Changes"
          fi

          # Prepend to CHANGELOG
          {
            echo "# Changelog"
            echo ""
            echo "## [$VERSION] - $DATE"
            echo ""
            echo "$SECTION_TITLE"
            echo ""
            if [ -n "${{ github.event.inputs.release_notes }}" ]; then
              echo "${{ github.event.inputs.release_notes }}"
              echo ""
            fi
            echo "$COMMITS"
            echo ""
            if [ -f CHANGELOG.md ]; then
              tail -n +2 CHANGELOG.md
            fi
          } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit changes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json pnpm-lock.yaml CHANGELOG.md
          git commit -m "chore(release): $VERSION [skip ci]"

          # Push to source branch
          git push origin HEAD:${{ github.event.inputs.source_branch }}

      - name: Create and push tag
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release (native)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"

          # Determine release title
          if [[ "$RELEASE_TYPE" == "major" ]]; then
            TITLE="💥 v$VERSION - Major Release"
          elif [[ "$RELEASE_TYPE" == "release-candidate" ]]; then
            TITLE="🧪 v$VERSION - Release Candidate"
          elif [[ "$IS_PRERELEASE" == "true" ]]; then
            TITLE="🚧 v$VERSION - Pre-release"
          else
            TITLE="✨ v$VERSION"
          fi

          # Build release notes
          NOTES="${{ github.event.inputs.release_notes }}

          ### What's Changed
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v$VERSION/CHANGELOG.md) for full details.
          "

          if [[ "$RELEASE_TYPE" == "major" && "$IS_PRERELEASE" != "true" ]]; then
            NOTES+="

          ### 📦 Installation
          Windows installers will be attached shortly...
          "
          fi

          # Create release
          PRERELEASE_FLAG=""
          if [[ "$IS_PRERELEASE" == "true" ]]; then
            PRERELEASE_FLAG="--prerelease"
          fi

          echo "$NOTES" | gh release create "v$VERSION" \
            --title "$TITLE" \
            --notes-file - \
            $PRERELEASE_FLAG

  build-installers:
    name: Build Windows Installer
    needs: create-release
    # Build for major releases (including RC) to enable testing
    if: |
      github.event.inputs.release_type == 'major' || 
      github.event.inputs.release_type == 'release-candidate'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: v${{ needs.create-release.outputs.release_version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Build Windows installer
        run: pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installer to release (native)
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.create-release.outputs.release_version }}"

          # Upload installer
          gh release upload "$TAG" dist/*.exe dist/*.zip --clobber

          # Append installation instructions
          INSTALL_NOTES="

          ---

          ## 📦 Installation

          ### Windows Installer
          1. Download \`Zenoter-Setup-${{ needs.create-release.outputs.release_version }}.exe\`
          2. Run the installer
          3. Follow the installation wizard
          4. Launch Zenoter from Start Menu

          ### Portable Version
          1. Download \`Zenoter-${{ needs.create-release.outputs.release_version }}-win.zip\`
          2. Extract to your preferred location
          3. Run \`Zenoter.exe\`

          ### 🔄 Auto-Update
          Future updates will be delivered automatically through the app.

          ---

          **System Requirements:**
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum
          - 500MB free disk space
          "

          # Get current body and append
          CURRENT_BODY=$(gh release view "$TAG" --json body -q .body)
          echo "$CURRENT_BODY$INSTALL_NOTES" | gh release edit "$TAG" --notes-file -

      - name: Notify completion
        run: |
          echo "🎉 Release v${{ needs.create-release.outputs.release_version }} completed!"
          echo "✅ Windows installer built and uploaded"
