name: Validate Release (Dry Run)

on:
  pull_request:
    branches:
      - main
      - release
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test'
        required: false
        default: ''

permissions:
  contents: read
  issues: read
  pull-requests: read

jobs:
  dry-run:
    name: Semantic Release Dry Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Use branch from input or PR head
          ref: ${{ github.event.inputs.branch || github.head_ref }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release (dry-run)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          echo "üîç Running semantic-release in dry-run mode..."
          echo "üìã This will show what WOULD happen when merged to main"
          echo "üìã Repository: ${{ github.repository }}"
          echo "üìã PR Branch: ${{ github.head_ref || github.ref_name }}"
          echo "üìã Base: ${{ github.base_ref || 'N/A' }}"
          echo "üìã Testing from: temp-release-preview (main + PR changes)"
          echo ""

          # Run dry-run and capture output
          set +e
          pnpm exec semantic-release --dry-run --debug 2>&1 | tee dry-run.log
          EXIT_CODE=${PIPESTATUS[0]}
          set -e

          echo ""
          echo "üìä Exit code: $EXIT_CODE"

          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ùå Dry run failed with exit code $EXIT_CODE"
            echo "üìã This means the actual release would fail!"
            exit $EXIT_CODE
          fi

      - name: Upload dry-run logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dry-run-logs
          path: dry-run.log
          retention-days: 1

      - name: Extract version from logs
        id: extract
        if: always()
        run: |
          if [ -f dry-run.log ]; then
            # Case insensitive search for version
            if grep -iq "release version is" dry-run.log; then
              VERSION=$(grep -ioP "(the )?next release version is \K[0-9]+\.[0-9]+\.[0-9]+" dry-run.log | head -1)
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "has_release=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Found version: $VERSION"
            elif grep -iq "no relevant changes" dry-run.log; then
              echo "has_release=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è  No release needed"
            else
              echo "has_release=unknown" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è  Could not determine release status"
            fi
          fi

      - name: Comment on PR with version
        if: github.event_name == 'pull_request' && steps.extract.outputs.has_release == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.extract.outputs.version }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          COMMIT_COUNT=$(grep -oP 'Analysis of \K[0-9]+' dry-run.log | head -1 || echo 'unknown')

          gh pr comment $PR_NUMBER --body "## üéØ Release Preview

          This PR will trigger release **v$VERSION** when merged to \`main\`.

          ### üìã Details
          - **Version**: v$VERSION
          - **Branch**: \`${{ github.head_ref }}\`
          - **Commits**: $COMMIT_COUNT

          > üí° To release: merge to \`main\`, then merge \`main\` ‚Üí \`release\` branch" --edit-last || gh pr comment $PR_NUMBER --body "## üéØ Release Preview

          This PR will trigger release **v$VERSION** when merged to \`main\`.

          ### üìã Details
          - **Version**: v$VERSION
          - **Branch**: \`${{ github.head_ref }}\`
          - **Commits**: $COMMIT_COUNT

          > üí° To release: merge to \`main\`, then merge \`main\` ‚Üí \`release\` branch"

      - name: Comment on PR no release
        if: github.event_name == 'pull_request' && steps.extract.outputs.has_release == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          gh pr comment $PR_NUMBER --body "‚ÑπÔ∏è **No Release** - This PR will not trigger a release (no relevant commits)" --edit-last || gh pr comment $PR_NUMBER --body "‚ÑπÔ∏è **No Release** - This PR will not trigger a release (no relevant commits)"

      - name: Summary
        if: always()
        run: |
          echo "‚úÖ Dry run complete!"
          echo ""
          echo "Check the logs above to see:"
          echo "  ‚Ä¢ What version would be released"
          echo "  ‚Ä¢ What commits would be included"
          echo "  ‚Ä¢ What changes would be made"
          echo "  ‚Ä¢ Any errors that would occur"
