name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-major-version: ${{ steps.semantic.outputs.new-release-major-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          pnpm exec semantic-release

      - name: Output release info
        if: steps.semantic.outputs.new-release-published == 'true'
        run: |
          echo "üéâ New release published: v${{ steps.semantic.outputs.new-release-version }}"
          echo "Major version: ${{ steps.semantic.outputs.new-release-major-version }}"

  # Build installers only for major releases
  build-installers:
    name: Build Windows Installer
    needs: release
    if: needs.release.outputs.new-release-published == 'true' && needs.release.outputs.new-release-major-version != '0'
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Build Windows installer
        run: pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installer to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release.outputs.new-release-version }}
          files: |
            dist/*.exe
            dist/*.zip
          append_body: true
          body: |

            ---

            ## üì¶ Installation

            ### Windows
            1. Download `Zenoter-Setup-${{ needs.release.outputs.new-release-version }}.exe`
            2. Run the installer
            3. Follow the installation wizard

            ### Portable Version
            1. Download `Zenoter-${{ needs.release.outputs.new-release-version }}-win.zip`
            2. Extract to desired location
            3. Run `Zenoter.exe`

            ---

            **See full release notes above** ‚¨ÜÔ∏è
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
