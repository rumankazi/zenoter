name: Release

on:
  push:
    branches:
      - release
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GIT_AUTHOR_NAME: rumankazi
          GIT_AUTHOR_EMAIL: kaziruman@gmail.com
          GIT_COMMITTER_NAME: rumankazi
          GIT_COMMITTER_EMAIL: kaziruman@gmail.com
        run: |
          # Run semantic-release and capture output
          OUTPUT=$(pnpm exec semantic-release 2>&1)
          echo "$OUTPUT"

          # Parse output for release information
          if echo "$OUTPUT" | grep -q "Published release"; then
            VERSION=$(echo "$OUTPUT" | grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+")
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ New release published: v$VERSION"
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No release published"
          fi

      - name: Output release info
        if: steps.semantic.outputs.new-release-published == 'true'
        run: |
          echo "üéâ New release published: v${{ steps.semantic.outputs.new-release-version }}"

  # Build installers for major releases only (v1.0.0, v2.0.0, etc.)
  build-installers:
    name: Build Windows Installer
    needs: release
    if: |
      needs.release.outputs.new-release-published == 'true' && 
      endsWith(needs.release.outputs.new-release-version, '.0.0')
    runs-on: windows-latest
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v5
        with:
          ref: v${{ needs.release.outputs.new-release-version }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Build Windows installer
        run: pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installer to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG="v${{ needs.release.outputs.new-release-version }}"

          # Upload installer artifacts
          gh release upload "$TAG" dist/*.exe dist/*.zip --clobber

          # Add installation instructions to release notes
          INSTALL_NOTES="

          ---

          ## üì¶ Installation

          ### Windows Installer
          1. Download \`Zenoter-Setup-${{ needs.release.outputs.new-release-version }}.exe\`
          2. Run the installer
          3. Follow the installation wizard

          ### Portable Version
          1. Download \`Zenoter-${{ needs.release.outputs.new-release-version }}-win.zip\`
          2. Extract to desired location
          3. Run \`Zenoter.exe\`

          **System Requirements:**
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum
          - 500MB free disk space
          "

          # Append to existing release notes
          CURRENT_BODY=$(gh release view "$TAG" --json body -q .body)
          echo "$CURRENT_BODY$INSTALL_NOTES" | gh release edit "$TAG" --notes-file -
