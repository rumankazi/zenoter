name: Release

on:
  push:
    branches:
      - release # Dedicated release branch
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
      new-release-major-version: ${{ steps.semantic.outputs.new-release-major-version }}
      new-release-channel: ${{ steps.semantic.outputs.new-release-channel }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          pnpm exec semantic-release

      - name: Output release info
        if: steps.semantic.outputs.new-release-published == 'true'
        run: |
          echo "ðŸŽ‰ New release published: v${{ steps.semantic.outputs.new-release-version }}"
          echo "Major version: ${{ steps.semantic.outputs.new-release-major-version }}"
          echo "Channel: ${{ steps.semantic.outputs.new-release-channel }}"

  # Build installers for major releases (including RC for testing)
  build-installers:
    name: Build Windows Installer
    needs: release
    if: |
      needs.release.outputs.new-release-published == 'true' && 
      (endsWith(needs.release.outputs.new-release-version, '.0.0') || needs.release.outputs.new-release-channel == 'rc')
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: v${{ needs.release.outputs.new-release-version }}
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Build Windows installer
        run: pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload installer to release (native)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.release.outputs.new-release-version }}"

          # Upload installer
          gh release upload "$TAG" dist/*.exe dist/*.zip --clobber

          # Append installation instructions
          INSTALL_NOTES="

          ---

          ## ðŸ“¦ Installation

          ### Windows Installer
          1. Download \`Zenoter-Setup-${{ needs.release.outputs.new-release-version }}.exe\`
          2. Run the installer
          3. Follow the installation wizard

          ### Portable Version
          1. Download \`Zenoter-${{ needs.release.outputs.new-release-version }}-win.zip\`
          2. Extract to desired location
          3. Run \`Zenoter.exe\`

          ---

          **System Requirements:**
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum
          - 500MB free disk space
          "

          # Get current body and append
          CURRENT_BODY=$(gh release view "$TAG" --json body -q .body)
          echo "$CURRENT_BODY$INSTALL_NOTES" | gh release edit "$TAG" --notes-file -
