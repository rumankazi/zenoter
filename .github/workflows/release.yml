name: Release

on:
  push:
    branches:
      - release
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # Build and verify artifacts BEFORE creating release
  verify-build:
    name: Verify Build Artifacts
    runs-on: windows-latest
    outputs:
      can-build: ${{ steps.verify.outputs.can-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Build Windows installers
        run: pnpm run electron:build

      - name: Verify artifacts exist
        id: verify
        shell: bash
        run: |
          echo "üîç Checking for build artifacts..."

          if [ ! -f dist/*.exe ]; then
            echo "‚ùå ERROR: No .exe installer found!"
            echo "can-build=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [ ! -f dist/*.zip ]; then
            echo "‚ùå ERROR: No .zip archive found!"
            echo "can-build=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # List artifacts
          echo "‚úÖ Build artifacts verified:"
          ls -lh dist/*.exe dist/*.zip

          # Check file sizes (should be > 100MB)
          EXE_SIZE=$(stat -c%s dist/*.exe 2>/dev/null || stat -f%z dist/*.exe)
          ZIP_SIZE=$(stat -c%s dist/*.zip 2>/dev/null || stat -f%z dist/*.zip)

          if [ "$EXE_SIZE" -lt 104857600 ]; then
            echo "‚ùå ERROR: Installer too small ($EXE_SIZE bytes), build may be incomplete"
            exit 1
          fi

          if [ "$ZIP_SIZE" -lt 104857600 ]; then
            echo "‚ùå ERROR: ZIP too small ($ZIP_SIZE bytes), build may be incomplete"
            exit 1
          fi

          echo "‚úÖ All artifacts verified successfully"
          echo "can-build=true" >> $GITHUB_OUTPUT

      - name: Upload artifacts for release job
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 1

  release:
    name: Semantic Release
    needs: verify-build
    if: needs.verify-build.outputs.can-build == 'true'
    runs-on: ubuntu-latest
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          GIT_AUTHOR_NAME: rumankazi
          GIT_AUTHOR_EMAIL: kaziruman@gmail.com
          GIT_COMMITTER_NAME: rumankazi
          GIT_COMMITTER_EMAIL: kaziruman@gmail.com
        run: |
          # Run semantic-release and capture output
          OUTPUT=$(pnpm exec semantic-release 2>&1)
          echo "$OUTPUT"

          # Parse output for release information
          if echo "$OUTPUT" | grep -q "Published release"; then
            VERSION=$(echo "$OUTPUT" | grep -oP "Published release \K[0-9]+\.[0-9]+\.[0-9]+")
            echo "new-release-published=true" >> $GITHUB_OUTPUT
            echo "new-release-version=$VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ New release published: v$VERSION"
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No release published"
          fi

      - name: Output release info
        if: steps.semantic.outputs.new-release-published == 'true'
        run: |
          echo "üéâ New release published: v${{ steps.semantic.outputs.new-release-version }}"

  # Upload installers only if a new release was published
  upload-installers:
    name: Upload Windows Installers
    needs: [verify-build, release]
    if: needs.release.outputs.new-release-published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout release tag
        uses: actions/checkout@v5
        with:
          ref: v${{ needs.release.outputs.new-release-version }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-installers
          path: dist

      - name: List downloaded artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          ls -lh dist/

      - name: Upload installers to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.release.outputs.new-release-version }}"

          echo "üì§ Uploading artifacts to release $TAG..."
          gh release upload "$TAG" dist/*.exe dist/*.zip --clobber

          echo "‚úÖ Artifacts uploaded successfully"

      - name: Add installation instructions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v${{ needs.release.outputs.new-release-version }}"

          INSTALL_NOTES="

          ---

          ## üì¶ Installation

          ### Windows Installer (Recommended)
          1. Download \`Zenoter-Setup-${{ needs.release.outputs.new-release-version }}.exe\`
          2. Run the installer (you may see \"Unknown Publisher\" warning - this is normal)
          3. Follow the installation wizard

          ### Portable Version
          1. Download \`Zenoter-Setup-${{ needs.release.outputs.new-release-version }}.zip\`
          2. Extract to desired location
          3. Run \`Zenoter.exe\`

          **System Requirements:**
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum
          - 500MB free disk space

          **Note:** Installers are currently unsigned. Windows may show a security warning. This is normal for open-source software. We're working on getting code signing certificates.
          "

          # Append to existing release notes
          CURRENT_BODY=$(gh release view "$TAG" --json body -q .body)
          echo "$CURRENT_BODY$INSTALL_NOTES" | gh release edit "$TAG" --notes-file -

          echo "‚úÖ Release notes updated"
